@using System.Globalization
@using GameFeed.Common
@using GameFeed.Domain.Entities
@using GameFeed.Services.ViewModels
@using Microsoft.AspNet.Identity

@model GameDetailViewModel

@{
    ViewBag.Title = Model.Name;

    //Rating circle calculations
    const int ratingDiameter = 120;
    const int ratingStrokeWidth = 12;
    const int ratingRadius = ratingDiameter / 2;
    const int ratingRadiusMinusBorder = ratingRadius - ratingStrokeWidth;
    const float ratingDashArray = (float)(2 * Math.PI * ratingRadiusMinusBorder);
    float ratingInverse = 1f - Model.Rating / 100f;
    float ratingOffset = ratingDashArray * ratingInverse;

    //Map rating to color
    int red = (int)(100f - Model.Rating).Map(0, 100, 0, 255);
    int green = (int)Model.Rating.Map(0, 100, 0, 255);
    string ratingColor = $"rgb({red},{green},0)";
}

@section Css {
    <link href="~/Content/game-detail.css" rel="stylesheet" />

    <style>
        #banner {
            background-image: url("@Model.Screenshots.TakeRandom()");
        }

        .progress-circle-value {
            stroke-dasharray: @ratingDashArray.ToString("G", new CultureInfo("en-US", false).NumberFormat);
            stroke-dashoffset: @ratingOffset.ToString("G", new CultureInfo("en-US", false).NumberFormat);
        }

        @@keyframes progress {
            from {
                stroke-dashoffset: @ratingDashArray.ToString("G", new CultureInfo("en-US", false).NumberFormat);
            }
            to {
                stroke-dashoffset: @ratingOffset.ToString("G", new CultureInfo("en-US", false).NumberFormat);
            }
        }
    </style>
}
<div id="banner-wrapper">
    <div id="banner"></div>
    <div id="title-wrapper">
        <div id="game-title" class="col-sm-offset-1">
            <h1>@Model.Name</h1>
            <h2>@Model.FirstReleaseDate</h2>
            <h3>@Model.Developers.FirstOrDefault()</h3>
        </div>
    </div>
</div>
<div id="game-content">
    <div id="game-cover" class="col-sm-offset-1">
        <img src="@Model.Cover" />
        @using (Ajax.BeginForm("ToggleFollow", "Game", new { gameId = Model.Id, userId = User.Identity.GetUserId() }, new AjaxOptions { HttpMethod = "POST", OnBegin = "checkUserAuthenticated", OnSuccess = "changeFollowButton" })) {
            <button type="submit" id="follow-button" class="col-xs-12 m-v-10 @(Model.CurrentUserIsFollowing ? "button-subtle" : "")">@(Model.CurrentUserIsFollowing ? "Unfollow" : "Follow")</button>
        }
    </div>
    <div id="game-feed">
        <div id="game-summary">
            <b class="text-label m-b-5">Genres</b>
            <div class="tag-area">
                @foreach (string genreName in Model.Genres) {
                    <button class="tag"><i class="fa fa-tag" aria-hidden="true"></i>@genreName</button>
                }
            </div>
            <b class="text-label m-v-5">Platforms</b>
            <div class="tag-area m-b-10">
                @foreach (GamePlatform gamePlatform in Model.Platforms) {
                    <button class="tag"><i class="fa fa-gamepad" aria-hidden="true"></i>@gamePlatform.Platform.Name</button>
                }
            </div>
            <div id="summary-text" class="p-t-10">
                @Model.Summary
            </div>
        </div>
    </div>
    <div id="game-info">
        <div id="game-rating">
            <svg class="progress-circle" width="@ratingDiameter" height="@ratingDiameter" viewBox="0 0 @ratingDiameter @ratingDiameter">
                <circle cx="@ratingRadius" cy="@ratingRadius" r="@(ratingRadius - ratingStrokeWidth)" fill="none" stroke="#e6e6e6" stroke-width="@ratingStrokeWidth" />
                <circle class="progress-circle-value" cx="@ratingRadius" cy="@ratingRadius" r="@(ratingRadius - ratingStrokeWidth)" fill="none" stroke="@ratingColor" stroke-width="@ratingStrokeWidth" />
            </svg>
            <h1>@((int)Model.Rating)</h1>
        </div>
        <div id="info">
            <h4 class="p-b-5 m-b-5">Release dates</h4>
            <table id="release-dates">
                <tbody>
                @foreach (GamePlatform gamePlatform in Model.Platforms) {
                    <tr>
                        <td class="text-label">@gamePlatform.Platform.Name</td>
                        <td>@gamePlatform.ReleaseDate.ToShortDateString()</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script>
        let following = @Json.Encode(Model.CurrentUserIsFollowing);

        function checkUserAuthenticated() {
            return @Json.Encode(User.Identity.IsAuthenticated);
        }

        function changeFollowButton() {
            const followButton = $("#follow-button");

            following = !following;

            if (following) {
                followButton.text("Unfollow");
                followButton.addClass("button-subtle");
            } else {
                followButton.text("Follow");
                followButton.removeClass("button-subtle");
            }
        }
    </script>
}
